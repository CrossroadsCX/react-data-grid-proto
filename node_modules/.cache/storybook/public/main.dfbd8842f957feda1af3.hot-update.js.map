{"version":3,"file":"main.dfbd8842f957feda1af3.hot-update.js","sources":["webpack:///./src/reactGrid.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport DataGrid, { EditorProps, TextEditor } from 'react-data-grid'\n\nimport SelectEditor from './selectEditor'\nimport AsyncSelectEditor, { OptionsType } from './asyncSelectEditor'\n\ninterface Row {\n  id: number;\n  title: string;\n}\n\nconst products = [\n  { label: 'Coke', value: 'coke' },\n  { label: 'Pepsi', value: 'pepsi' },\n  { label: 'Mountain Dew', value: 'mountain_dew' },\n  { label: 'Dr. Pepper', value: 'dr_pepper' },\n  { label: 'Arizona Iced Tea', value: 'arizona_iced_tea' },\n  { label: 'Mr. Pibb', value: 'mr_pibb' },\n]\n\nconst filterProducts = (input: string) => {\n  console.log(input)\n  return products.filter((product) => product.label.toLowerCase().includes(input.toLowerCase()))\n}\n\nconst loadOptions = async (input: string): Promise<OptionsType> => {\n  return new Promise((resolve, reject) => {\n    const filteredProducts = filterProducts(input)\n    setTimeout(() => {\n      resolve(filteredProducts)\n    }, 1000)\n  })\n}\n\nconst states = [\n  { label: 'Indiana', value: 'IN' },\n  { label: 'Illinois', value: 'IL'},\n]\n\nconst columns = [\n  { key: 'id', name: 'ID' },\n  { key: 'title', name: 'Title', editor: TextEditor },\n  {\n    key: 'state',\n    name: 'State',\n    editor: (p: EditorProps<Row>) => (<SelectEditor {...p} options={states} />),\n    editorOptions: {\n      editOnClick: true,\n    },\n  },\n  {\n    key: 'product',\n    name: 'Product',\n    editor: (p: EditorProps<Row>) => (<AsyncSelectEditor {...p} loadOptions={loadOptions} />),\n    editorOptions: {\n      editOnClick: true,\n    },\n  },\n];\n\nconst initialRows = [\n  { id: 0, title: 'Example' },\n  { id: 1, title: 'Demo' }\n];\n\nconst rowKeyGetter = (row: Row): number => {\n  return row.id\n}\n\nexport const ReactGrid = () => {\n  const [rows, setRows] = useState(initialRows)\n\n  useEffect(() => {\n    console.log(rows)\n  }, [rows])\n\n  return (\n    <DataGrid columns={columns} rows={rows} onRowsChange={setRows} />\n  )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFA;AACA;AAEA;AACA;;AAOA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAJA;AASA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAJA;AAUA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAVA;;;;A","sourceRoot":""}