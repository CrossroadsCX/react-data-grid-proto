{"version":3,"file":"main.iframe.bundle.js","sources":["webpack:///./.storybook/preview.js","webpack:///./.storybook/preview.js-generated-config-entry.js","webpack:///./generated-stories-entry.js","webpack:///\\.)(","webpack:///./src/asyncSelectEditor.tsx","webpack:///./src/reactGrid.stories.tsx","webpack:///./src/reactGrid.tsx","webpack:///./src/selectEditor.tsx","webpack:///./storybook-init-framework-entry.js","webpack:///./util.inspect (ignored)"],"sourcesContent":["export const parameters = {\n  actions: { argTypesRegex: \"^on[A-Z].*\" },\n  controls: {\n    matchers: {\n      color: /(background|color)$/i,\n      date: /Date$/,\n    },\n  },\n}","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/no-unresolved */\nimport { addDecorator, addParameters, addLoader, addArgs, addArgTypes, addArgsEnhancer, addArgTypesEnhancer, setGlobalRender } from '/Users/christopherbirk/Development/CrossroadsCX/react-data-grid-proto/.yarn/__virtual__/@storybook-client-api-virtual-83d65b9960/0/cache/@storybook-client-api-npm-6.5.9-c3b4358cc1-90c8f84615.zip/node_modules/@storybook/client-api';\nimport * as config from '/Users/christopherbirk/Development/CrossroadsCX/react-data-grid-proto/.storybook/preview.js';\nObject.keys(config).forEach(function (key) {\n  var value = config[key];\n\n  switch (key) {\n    case 'args':\n      {\n        return addArgs(value);\n      }\n\n    case 'argTypes':\n      {\n        return addArgTypes(value);\n      }\n\n    case 'decorators':\n      {\n        return value.forEach(function (decorator) {\n          return addDecorator(decorator, false);\n        });\n      }\n\n    case 'loaders':\n      {\n        return value.forEach(function (loader) {\n          return addLoader(loader, false);\n        });\n      }\n\n    case 'parameters':\n      {\n        return addParameters(_objectSpread({}, value), false);\n      }\n\n    case 'argTypesEnhancers':\n      {\n        return value.forEach(function (enhancer) {\n          return addArgTypesEnhancer(enhancer);\n        });\n      }\n\n    case 'argsEnhancers':\n      {\n        return value.forEach(function (enhancer) {\n          return addArgsEnhancer(enhancer);\n        });\n      }\n\n    case 'render':\n      {\n        return setGlobalRender(value);\n      }\n\n    case 'globals':\n    case 'globalTypes':\n      {\n        var v = {};\n        v[key] = value;\n        return addParameters(v, false);\n      }\n\n    case '__namedExportsOrder':\n    case 'decorateStory':\n    case 'renderToDOM':\n      {\n        return null; // This key is not handled directly in v6 mode.\n      }\n\n    default:\n      {\n        // eslint-disable-next-line prefer-template\n        return console.log(key + ' was not supported :( !');\n      }\n  }\n});","\"use strict\";\n\nvar _frameworkImportPath = require(\"@storybook/react\");\n\n/* eslint-disable import/no-unresolved */\n(0, _frameworkImportPath.configure)([require.context('./src', true, /^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.(jsx|tsx))$/)], module, false);","var map = {\n\t\"./reactGrid.stories.tsx\": \"./src/reactGrid.stories.tsx\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./src sync recursive ^\\\\.(?:(?:^|\\\\/|(?:(?:(?!(?:^|\\\\/)\\\\.).)*?)\\\\/)(?!\\\\.)(?=.)[^/]*?\\\\.stories\\\\.(jsx|tsx))$\";","import React from 'react'\nimport type { EditorProps } from 'react-data-grid'\nimport { ActionMeta, SingleValue } from 'react-select'\nimport AsyncSelect from 'react-select/async'\n\nexport type OptionType = { [key: string]: any }\nexport type OptionsType = Array<OptionType>\n\ninterface SelectEditorProps<TRow, TSummaryRow = unknown> extends EditorProps<TRow, TSummaryRow> {\n  loadOptions: (inputValue: string, callback: (options: OptionsType) => void) => Promise<OptionsType> | void;\n}\n\ninterface SelectOptions {\n  options?: OptionsType\n}\n\nexport default function AsyncSelectEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  // onClose,\n  loadOptions,\n}: SelectEditorProps<TRow, TSummaryRow>) {\n  const selectOptions: SelectOptions = {}\n\n  const onChange = (newValue: SingleValue<OptionType>, actionMeta: ActionMeta<OptionType>) => {\n    const newRow = { ...row, [column.key]: newValue }\n    console.log(newRow)\n    onRowChange(newRow, true)\n  }\n\n  return (\n    <AsyncSelect\n      loadOptions={loadOptions}\n      menuPortalTarget={document.body}\n      onChange={onChange}\n      autoFocus\n    />\n  )\n}\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from 'react'\\nimport { Meta, Story } from '@storybook/react'\\nimport { ReactGrid } from './reactGrid'\\n\\ntype GridProps = {}\\n\\nexport default {\\n  title: 'ReactGrid',\\n  component: ReactGrid,\\n} as Meta\\n\\nconst Template: Story<GridProps> = (args: any) => <ReactGrid {...args} />\\n\\nexport const Default = Template.bind({})\\nDefault.args = {}\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":35,\"line\":12},\"endLoc\":{\"col\":73,\"line\":12},\"startBody\":{\"col\":35,\"line\":12},\"endBody\":{\"col\":73,\"line\":12}}};\n    \nimport React from 'react'\nimport { Meta, Story } from '@storybook/react'\nimport { ReactGrid } from './reactGrid'\n\ntype GridProps = {}\n\nexport default {\n  title: 'ReactGrid',\n  component: ReactGrid,\n} as Meta\n\nconst Template: Story<GridProps> = (args: any) => <ReactGrid {...args} />\n\nexport const Default = Template.bind({});Default.args = {}\n\n\n\nDefault.parameters = { storySource: { source: \"(args: any) => <ReactGrid {...args} />\" }, ...Default.parameters };","import React, { useEffect, useState } from 'react'\nimport DataGrid, { EditorProps, FormatterProps, TextEditor } from 'react-data-grid'\n\nimport SelectEditor from './selectEditor'\nimport AsyncSelectEditor, { OptionType, OptionsType } from './asyncSelectEditor'\n\ntype Product = {\n  label: string;\n  value: string;\n}\ninterface Row {\n  id: number;\n  title: string;\n  state?: string;\n  product?: Product;\n}\n\nconst products = [\n  { label: 'Coke', value: 'coke' },\n  { label: 'Pepsi', value: 'pepsi' },\n  { label: 'Mountain Dew', value: 'mountain_dew' },\n  { label: 'Dr. Pepper', value: 'dr_pepper' },\n  { label: 'Arizona Iced Tea', value: 'arizona_iced_tea' },\n  { label: 'Mr. Pibb', value: 'mr_pibb' },\n]\n\nconst filterProducts = (input: string) => {\n  console.log(input)\n  return products.filter((product) => product.label.toLowerCase().includes(input.toLowerCase()))\n}\n\nconst loadOptions = async (input: string): Promise<OptionsType> => new Promise((resolve, reject) => {\n  const filteredProducts = filterProducts(input)\n  setTimeout(() => {\n    resolve(filteredProducts)\n  }, 1000)\n})\n\nconst states = [\n  { label: 'Indiana', value: 'IN' },\n  { label: 'Illinois', value: 'IL' },\n]\n\nconst isOption = (input: string | number | OptionType): input is OptionType => {\n  if (typeof input === 'object' && input.label && input.value) {\n    return true\n  }\n\n  return false\n}\n\nconst selectFormatter = (props: FormatterProps<Row>) => {\n  const { key } = props.column\n  const { row } = props\n  const option = row[key as keyof Row]\n  if (option && isOption(option)) {\n    const { label, value } = option\n    return (<>{label}</>)\n  }\n\n  return null\n}\n\nconst columns = [\n  { key: 'id', name: 'ID' },\n  { key: 'title', name: 'Title', editor: TextEditor },\n  {\n    key: 'state',\n    name: 'State',\n    editor: (p: EditorProps<Row>) => (<SelectEditor {...p} options={states} />),\n    editorOptions: {\n      editOnClick: true,\n    },\n    formatter: selectFormatter,\n  },\n  {\n    key: 'product',\n    name: 'Product',\n    editor: (p: EditorProps<Row>) => (<AsyncSelectEditor {...p} loadOptions={loadOptions} />),\n    editorOptions: {\n      editOnClick: true,\n    },\n    formatter: selectFormatter,\n  },\n]\n\nconst initialRows = [\n  { id: 0, title: 'Example' },\n  { id: 1, title: 'Demo' },\n]\n\nconst rowKeyGetter = (row: Row): number => row.id\n\nexport const ReactGrid = () => {\n  const [rows, setRows] = useState(initialRows)\n\n  useEffect(() => {\n    console.log(rows)\n  }, [rows])\n\n  return (\n    <DataGrid<Row> columns={columns} rows={rows} onRowsChange={setRows} rowKeyGetter={rowKeyGetter} />\n  )\n}\n","import React from 'react'\nimport type { EditorProps } from 'react-data-grid'\nimport Select, { ActionMeta, SingleValue } from 'react-select'\n\ntype OptionType = { [key: string]: any }\ntype OptionsType = Array<OptionType>\n\ninterface SelectEditorProps<TRow, TSummaryRow = unknown> extends EditorProps<TRow, TSummaryRow> {\n  options?: OptionsType;\n}\n\ninterface SelectOptions {\n  options?: OptionsType\n}\n\nexport default function SelectEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  // onClose,\n  options,\n}: SelectEditorProps<TRow, TSummaryRow>) {\n  const selectOptions: SelectOptions = {}\n\n  const onChange = (newValue: SingleValue<OptionType>, actionMeta: ActionMeta<OptionType>) => {\n    const newRow = { ...row, [column.key]: newValue }\n\n    onRowChange(newRow, true)\n  }\n\n  if (options) {\n    selectOptions.options = options\n  }\n\n  return (\n    <Select\n      {...selectOptions}\n      menuPortalTarget={document.body}\n      onChange={onChange}\n      autoFocus\n    />\n  )\n}\n","import '@storybook/react';","/* (ignored) */"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AADA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApEA;AAsEA;;;;;;;;;;;;;AClFA;AACA;AACA;AAEA;AACA;AACA;AADA;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACtBA;AAGA;;AAaA;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAvBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;;AAIA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFA;AACA;AAEA;AACA;;;AAaA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAPA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAPA;AAWA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAVA;;;;;;;;;;;;;;;;;;;;;;AC7FA;AAEA;;AAaA;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAJA;AAOA;AA3BA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}